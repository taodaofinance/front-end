{"remainingRequest":"C:\\GitCrypto\\front_end\\node_modules\\thread-loader\\dist\\cjs.js!C:\\GitCrypto\\front_end\\node_modules\\babel-loader\\lib\\index.js!C:\\GitCrypto\\front_end\\node_modules\\ts-loader\\index.js??ref--14-3!C:\\GitCrypto\\front_end\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\GitCrypto\\front_end\\src\\store\\modules\\settings.ts","dependencies":[{"path":"C:\\GitCrypto\\front_end\\src\\store\\modules\\settings.ts","mtime":1620938689140},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\GitCrypto\\front_end\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\GitCrypto\\front_end\\src\\store\\modules\\settings.ts"],"names":[],"mappings":"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","sourcesContent":["import Vue from 'vue';\r\nimport { ethers } from 'ethers';\r\nimport store from '@/store';\r\n//import provider from '@/helpers/provider';\r\nimport addresses from '@/helpers/addresses';\r\nimport {\r\n  getExchangeRatesFromCoinGecko,\r\n  getPotions,\r\n  getAllowances,\r\n  revitalisePotion,\r\n  withdrawPotion\r\n} from '@/helpers/utils';\r\nimport {\r\n  ETHER,\r\n  EPOCH_INTERVAL,\r\n  BLOCK_RATE_SECONDS,\r\n  BLOCKS_PER_DAY,\r\n  EPOCH_STARTED\r\n} from '@/helpers/constants';\r\nimport assets from '@/helpers/assets.json';\r\nimport { abi as ierc20Abi } from '@/helpers/abi/IERC20.json';\r\nimport { abi as mimirTokenSale } from '@/helpers/abi/mimirTokenSale.json';\r\nimport { abi as pOlyTokenSale } from '@/helpers/abi/pOlyTokenSale.json';\r\nimport { abi as OHMPreSale } from '@/helpers/abi/OHMPreSale.json';\r\nimport { abi as OlympusStaking } from '@/helpers/abi/OlympusStaking.json';\r\nimport { abi as MigrateToOHM } from '@/helpers/abi/MigrateToOHM.json';\r\nimport { abi as sOHM } from '@/helpers/abi/sOHM.json';\r\nimport { abi as LPStaking } from '@/helpers/abi/LPStaking.json';\r\nimport { abi as DistributorContract } from '@/helpers/abi/DistributorContract.json';\r\nimport { abi as BondContract } from '@/helpers/abi/BondContract.json';\r\nimport { abi as BondCalcContract } from '@/helpers/abi/BondCalcContract.json';\r\nimport { abi as PairContract } from '@/helpers/abi/PairContract.json';\r\nimport { abi as PreTaoSales } from '@/helpers/abi/PreTaoSales.json';\r\nimport { abi as ExercisePtao } from '@/helpers/abi/ExercisePtao.json';\r\nimport cheerio from 'cheerio';\r\n\r\nimport { whitelist } from '@/helpers/whitelist.json';\r\n\r\nconst parseEther = ethers.utils.parseEther;\r\n\r\nlet provider;\r\n\r\nconst ethereum = window['ethereum'];\r\nif (ethereum) {\r\n  ethereum.on('accountsChanged', () => store.dispatch('init'));\r\n  ethereum.on('networkChanged', network => {\r\n    store.dispatch('init');\r\n  });\r\n}\r\n\r\nconst state = {\r\n  approval: 0,\r\n  loading: false,\r\n  address: null,\r\n  name: '',\r\n  whitelisted: false,\r\n  balance: 0,\r\n  ohmBalance: 0,\r\n  claim: 0,\r\n  minimumEth: 0,\r\n  providedEth: 0,\r\n  amount: 0,\r\n  remainingEth: 0,\r\n  network: { chainId: 0 },\r\n  exchangeRates: {},\r\n  allowance: 0,\r\n  stakeAllowance: 0,\r\n  unstakeAllowance: 0,\r\n  balances: {},\r\n  authorized: false,\r\n  allowanceTx: 0,\r\n  saleTx: 0,\r\n  confirmations: 1,\r\n  allotment: 0,\r\n  maxPurchase: 0,\r\n  price: 0,\r\n  maxSwap: 0,\r\n  amountSwap: 0,\r\n  boughtTao: false,\r\n  claimUnlocked: false,\r\n  claimable: false,\r\n  isInitialized: false,\r\n  blocksPerDay: BLOCKS_PER_DAY,\r\n  epochStarted: EPOCH_STARTED,\r\n  epochInterval: EPOCH_INTERVAL,\r\n  totalSupply: 0,\r\n  taoCircSupply: 0,\r\n  totalBusdLP: 0,\r\n  vaultBusd: 0,\r\n  taoStaked: 0,\r\n  lpPrice: 0,\r\n  lpInVault: 0,\r\n  lpLocked: 0,\r\n  taoists: 0,\r\n  principleValuation: 0,\r\n  menuOpened: false,\r\n  modalLoginOpen: false,\r\n  whitelistPretao: false,\r\n  allowancePretao: 0,\r\n  initializedPretao: false,\r\n  pretaoBalance: 0,\r\n  fiveDayRate: 0,\r\n  nextEpochRewards: 0,\r\n  exerciseMaxAllowedClaim: 0,\r\n  exerciseAbleToClaim: 0,\r\n  exercisePtaoAllowance: 0,\r\n  exerciseBusdAllowance: 0\r\n};\r\n\r\nconst mutations = {\r\n  set(_state, payload) {\r\n    Object.keys(payload).forEach(key => {\r\n      Vue.set(_state, key, payload[key]);\r\n    });\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  init: async ({ commit, dispatch }) => {\r\n    // commit('set', { loading: true });\r\n    // @ts-ignore\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      const ethereum = window['ethereum'];\r\n      provider = new ethers.providers.Web3Provider(ethereum);\r\n    }\r\n\r\n    if (provider) {\r\n      try {\r\n        const signer = provider.getSigner();\r\n        const address = await signer.getAddress();\r\n        if (address) await dispatch('login');\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    commit('set', { loading: false });\r\n  },\r\n  login: async ({ commit, dispatch }) => {\r\n    const startAt = Date.now()\r\n    if (provider) {\r\n      try {\r\n        let ohmContract,\r\n          ohmBalance = 0,\r\n          allowance = 0;\r\n        let sohmContract,\r\n          sohmMainContract,\r\n          sohmBalance = 0,\r\n          stakeAllowance = 0,\r\n          unstakeAllowance = 0,\r\n          circSupply = 0;\r\n        let stakingContract,\r\n          profit = 0;\r\n        let lpStakingContract,\r\n          totalLPStaked = 0,\r\n          lpStaked = 0,\r\n          pendingRewards = 0,\r\n          lpStakingAPY;\r\n        let lpContract,\r\n          lpBalance = 0,\r\n          lpStakeAllowance;\r\n        let distributorContract,\r\n          stakingAPY = 0,\r\n          stakingRebase = 0,\r\n          stakingReward = 0,\r\n          nextEpochBlock = 0;\r\n        let distributorContractSigner,\r\n          currentIndex = 0,\r\n          currentBlock = 0;\r\n\r\n        let bondingCalcContract,\r\n          bondValue = 0;\r\n        let bondingContract,\r\n          marketPrice = 0,\r\n          bondPrice = 0,\r\n          debtRatio = 0,\r\n          lpBondAllowance = 0,\r\n          interestDue = 0,\r\n          vestingPeriodInBlocks,\r\n          bondMaturationBlock = 0,\r\n          bondDiscount = 0,\r\n          pendingPayout = 0,\r\n          taoTotalSupply = 0,\r\n          taoCircSupply = 0,\r\n          taoStaked = 0,\r\n          totalBusd = 0,\r\n          totalVaultLP = 0,\r\n          lpLocked = 0,\r\n          principleValuation = 0,\r\n          vaultBUSD = 0,\r\n          lpPrice = 0,\r\n          nextEpochRewards = 0,\r\n          fiveDayRate = 0;\r\n        let pairContract;\r\n\r\n        await ethereum.enable();\r\n        provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const blockNumber = await provider.getBlockNumber();\r\n        const address = await signer.getAddress();\r\n        const network = await provider.getNetwork();\r\n        store.commit('set', { network: network });\r\n\r\n        const aOHMBalance = 0;\r\n\r\n        const daiContract = new ethers.Contract(\r\n          addresses[network.chainId].DAI_ADDRESS,\r\n          ierc20Abi,\r\n          provider\r\n        );\r\n        const balance = await daiContract.balanceOf(address);\r\n\r\n        commit('set', { address, balance: ethers.utils.formatEther(balance) });\r\n        try {\r\n          const preTaoallowance = await daiContract.allowance(\r\n            address,\r\n            addresses[network.chainId].PRETAO_SALES\r\n          )!;\r\n\r\n          const pretaoSales = await new ethers.Contract(\r\n            addresses[state.network.chainId].PRETAO_SALES,\r\n            PreTaoSales,\r\n            provider\r\n          );\r\n          const whitelistedPretao = await pretaoSales.approvedBuyers(address);\r\n          const initializedPretao = await pretaoSales.initialized();\r\n\r\n          const ptaoContract = new ethers.Contract(\r\n            addresses[network.chainId].PTAO_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n          const pretaoBalance = await ptaoContract.balanceOf(address);\r\n\r\n          commit('set', {\r\n            whitelistPretao: whitelistedPretao,\r\n            allowancePretao: preTaoallowance,\r\n            initializedPretao,\r\n            pretaoBalance: ethers.utils.formatEther(pretaoBalance)\r\n          });\r\n        } catch (ex) {\r\n          console.log(ex);\r\n        }\r\n\r\n        try {\r\n          allowance = await daiContract.allowance(\r\n            address,\r\n            addresses[network.chainId].PRESALE_ADDRESS\r\n          )!;\r\n          console.log('Allowance', allowance);\r\n\r\n          const presaleContract = await new ethers.Contract(\r\n            addresses[state.network.chainId].PRESALE_ADDRESS,\r\n            OHMPreSale,\r\n            provider\r\n          );\r\n          const presaleWhitelisted = await presaleContract.whitelistedAddresses(address);\r\n          const boughtTao = await presaleContract.boughtTAO(address);\r\n          const claimUnlocked = await presaleContract.claimUnlocked();\r\n          const claimable = await presaleContract.claimable(address);\r\n          const isInitialized = await presaleContract.startUnlocked();\r\n\r\n          commit('set', {\r\n            whitelisted: presaleWhitelisted,\r\n            claimUnlocked,\r\n            boughtTao,\r\n            claimable: ethers.utils.formatUnits(claimable, 'gwei'),\r\n            isInitialized,\r\n            allowance\r\n          });\r\n        } catch (ex) {\r\n          console.log(ex);\r\n        }\r\n\r\n        if (addresses[network.chainId].BONDINGCALC_ADDRESS) {\r\n          bondingCalcContract = new ethers.Contract(\r\n            addresses[network.chainId].BONDINGCALC_ADDRESS,\r\n            BondCalcContract,\r\n            provider\r\n          );\r\n          lpContract = new ethers.Contract(\r\n            addresses[network.chainId].LP_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n        }\r\n\r\n        if (addresses[network.chainId].BOND_ADDRESS) {\r\n          bondingContract = new ethers.Contract(\r\n            addresses[network.chainId].BOND_ADDRESS,\r\n            BondContract,\r\n            provider\r\n          );\r\n          bondingCalcContract = new ethers.Contract(\r\n            addresses[network.chainId].BONDINGCALC_ADDRESS,\r\n            BondCalcContract,\r\n            provider\r\n          );\r\n          pairContract = new ethers.Contract(\r\n            addresses[network.chainId].LP_ADDRESS,\r\n            PairContract,\r\n            provider\r\n          );\r\n          lpContract = new ethers.Contract(\r\n            addresses[network.chainId].LP_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n          ohmContract = new ethers.Contract(\r\n            addresses[network.chainId].OHM_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n\r\n          lpBalance = await lpContract.balanceOf(address);\r\n          totalVaultLP = await lpContract.balanceOf(addresses[network.chainId].VAULT_ADDRESS);\r\n          lpLocked = await lpContract.balanceOf('0xff45135267bb266f93eb55b1215353b7f6efa94e');\r\n\r\n          const totalLP = await lpContract.totalSupply();\r\n\r\n          taoTotalSupply = await ohmContract.totalSupply();\r\n\r\n          const distributorBalance = await ohmContract.balanceOf(\r\n            addresses[network.chainId].DISTRIBUTOR_ADDRESS\r\n          );\r\n          const rewardPoolBalance = await ohmContract.balanceOf(\r\n            addresses[network.chainId].REWARD_POOL_ADDRESS\r\n          );\r\n          const bondBalance = await ohmContract.balanceOf(addresses[network.chainId].BOND_ADDRESS);\r\n          const presaleBalance = await ohmContract.balanceOf(\r\n            addresses[network.chainId].PRESALE_ADDRESS\r\n          );\r\n\r\n          taoCircSupply =\r\n            taoTotalSupply - distributorBalance - rewardPoolBalance - bondBalance - presaleBalance;\r\n\r\n          const vestingPeriodInBlocks = await bondingContract.vestingPeriodInBlocks();\r\n\r\n          const totalDebtDo = await bondingContract.totalDebt();\r\n          debtRatio = await bondingCalcContract.calcDebtRatio(totalDebtDo, taoTotalSupply);\r\n\r\n          const reserves = await pairContract.getReserves();\r\n\r\n          totalBusd = reserves[1];\r\n          marketPrice = reserves[1].div(reserves[0]);\r\n\r\n          bondValue = await bondingContract.calculateBondInterest(\r\n            ethers.utils.parseEther('0.0001').toString()\r\n          );\r\n          bondPrice =\r\n            (2 * totalBusd * (ethers.utils.parseEther('0.0001').toNumber() / totalLP)) / bondValue;\r\n          bondDiscount = 1 - bondPrice / marketPrice;\r\n\r\n          const totalLPValue = totalBusd * 2;\r\n          lpPrice = totalLPValue / totalLP;\r\n\r\n          console.log('LpPrice', lpPrice.toString());\r\n          taoTotalSupply = await ohmContract.totalSupply();\r\n\r\n          const vaultPrincipleValuation = await bondingCalcContract.principleValuation(\r\n            addresses[network.chainId].LP_ADDRESS,\r\n            totalVaultLP.toString()\r\n          );\r\n\r\n          const totalVaultBUSD = await daiContract.balanceOf(\r\n            addresses[network.chainId].VAULT_ADDRESS\r\n          );\r\n          vaultBUSD = totalVaultBUSD;\r\n\r\n          const waultPrincipleValuation = await bondingCalcContract.principleValuation(\r\n            addresses[network.chainId].LP_ADDRESS,\r\n            lpLocked.toString()\r\n          );\r\n\r\n          principleValuation =\r\n            parseFloat(ethers.utils.formatUnits(vaultPrincipleValuation, 'ether')) +\r\n            parseFloat(ethers.utils.formatUnits(vaultBUSD, 'ether')) +\r\n            parseFloat(ethers.utils.formatUnits(waultPrincipleValuation, 'ether'));\r\n\r\n          console.log(\r\n            'vaultPrincipleValuation',\r\n            ethers.utils.formatUnits(vaultPrincipleValuation, 'ether')\r\n          );\r\n          console.log('vaultBUSD', ethers.utils.formatUnits(vaultBUSD, 'ether'));\r\n          console.log(\r\n            'waultPrincipleValuation',\r\n            ethers.utils.formatUnits(waultPrincipleValuation, 'ether')\r\n          );\r\n\r\n          lpBondAllowance = await lpContract.allowance(\r\n            address,\r\n            addresses[network.chainId].BOND_ADDRESS\r\n          );\r\n\r\n          const bondDetails = await bondingContract.depositorInfo(address);\r\n\r\n          currentBlock = await provider.getBlockNumber();\r\n\r\n          console.log('currentBlock');\r\n          console.log(currentBlock);\r\n\r\n          interestDue = bondDetails[1];\r\n          bondMaturationBlock = +bondDetails[3] + +bondDetails[2];\r\n          pendingPayout = await bondingContract.calculatePendingPayout(address);\r\n        }\r\n\r\n        if (addresses[network.chainId].LP_ADDRESS) {\r\n          lpContract = new ethers.Contract(\r\n            addresses[network.chainId].LP_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n          lpBalance = await lpContract.balanceOf(address);\r\n        }\r\n\r\n        if (addresses[network.chainId].LPSTAKING_ADDRESS) {\r\n          lpStakingContract = new ethers.Contract(\r\n            addresses[network.chainId].LPSTAKING_ADDRESS,\r\n            LPStaking,\r\n            provider\r\n          );\r\n          lpContract = new ethers.Contract(\r\n            addresses[network.chainId].LP_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n          ohmContract = new ethers.Contract(\r\n            addresses[network.chainId].OHM_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n\r\n          totalLPStaked = await lpStakingContract.totalStaked();\r\n          lpStaked = await lpStakingContract.getUserBalance(address);\r\n          pendingRewards = await lpStakingContract.pendingRewards(address);\r\n          lpStakeAllowance = await lpContract.allowance(\r\n            address,\r\n            addresses[state.network.chainId].LPSTAKING_ADDRESS\r\n          );\r\n\r\n          const totalLP = await lpContract.totalSupply();\r\n          const OHMInLP = await ohmContract.balanceOf(addresses[network.chainId].LP_ADDRESS);\r\n\r\n          const rewardPerBlock = await lpStakingContract.rewardPerBlock();\r\n\r\n          lpStakingAPY =\r\n            (rewardPerBlock * BLOCKS_PER_DAY * 365 * 100) /\r\n            (((totalLPStaked * OHMInLP) / totalLP) * 2);\r\n        }\r\n\r\n        if (addresses[network.chainId].OHM_ADDRESS) {\r\n          ohmContract = new ethers.Contract(\r\n            addresses[network.chainId].OHM_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n          ohmBalance = await ohmContract.balanceOf(address);\r\n          taoStaked = await ohmContract.balanceOf(addresses[network.chainId].STAKING_ADDRESS);\r\n\r\n          stakeAllowance = await ohmContract.allowance(\r\n            address,\r\n            addresses[network.chainId].STAKING_ADDRESS\r\n          )!;\r\n        }\r\n        if (addresses[network.chainId].SOHM_ADDRESS) {\r\n          sohmContract = new ethers.Contract(\r\n            addresses[network.chainId].SOHM_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n          sohmMainContract = new ethers.Contract(\r\n            addresses[network.chainId].SOHM_ADDRESS,\r\n            sOHM,\r\n            provider\r\n          );\r\n\r\n          sohmBalance = await sohmContract.balanceOf(address);\r\n          unstakeAllowance = await sohmContract.allowance(\r\n            address,\r\n            addresses[network.chainId].STAKING_ADDRESS\r\n          )!;\r\n          circSupply = await sohmMainContract.circulatingSupply();\r\n        }\r\n\r\n        console.log('stakeAllowance', stakeAllowance);\r\n        commit('set', { stakeAllowance, unstakeAllowance, lpStakeAllowance });\r\n\r\n\r\n        if (addresses[network.chainId].STAKING_ADDRESS) {\r\n          stakingContract = new ethers.Contract(\r\n            addresses[network.chainId].STAKING_ADDRESS,\r\n            OlympusStaking,\r\n            provider\r\n          );\r\n\r\n          try {\r\n            profit = await stakingContract.taoToDistributeNextEpoch();\r\n          } catch (ex) {\r\n            console.log('Erro');\r\n            console.log(ex);\r\n          }\r\n        }\r\n\r\n        if (addresses[network.chainId].DISTRIBUTOR_ADDRESS) {\r\n          distributorContract = new ethers.Contract(\r\n            addresses[network.chainId].DISTRIBUTOR_ADDRESS,\r\n            DistributorContract,\r\n            provider\r\n          );\r\n          sohmContract = new ethers.Contract(\r\n            addresses[network.chainId].SOHM_ADDRESS,\r\n            ierc20Abi,\r\n            provider\r\n          );\r\n\r\n          circSupply = await sohmMainContract.circulatingSupply();\r\n\r\n          stakingReward = await stakingContract.taoToDistributeNextEpoch(); //getCurrentRewardForNextEpoch();\r\n\r\n          currentBlock = await provider.getBlockNumber();\r\n\r\n          stakingRebase = stakingReward / circSupply;\r\n\r\n          nextEpochRewards =\r\n            parseFloat(ethers.utils.formatUnits(sohmBalance, 'gwei')) * stakingRebase;\r\n\r\n          fiveDayRate = Math.pow(1 + stakingRebase, 5 * 4) - 1;\r\n\r\n          const currentEpoch = Math.floor((currentBlock - EPOCH_STARTED) / EPOCH_INTERVAL);\r\n          nextEpochBlock = EPOCH_STARTED + EPOCH_INTERVAL * (currentEpoch + 1);\r\n\r\n          stakingAPY = Math.pow(1 + stakingRebase, 365 * 4);\r\n\r\n          stakingAPY = stakingAPY * 100;\r\n\r\n          currentIndex = await sohmContract.balanceOf(\r\n            addresses[network.chainId].SOHM_INDEX_ADDRESS\r\n          );\r\n        }\r\n        //const balance = balanceBefore.toFixed(2);\r\n        \r\n        await dispatch('getMaxPurchase');\r\n        await dispatch('getAllotmentPerBuyer');\r\n        await dispatch('getExerciseAllowance');\r\n\r\n        await dispatch('getMaxPurchase');\r\n        await dispatch('getAllotmentPerBuyer');\r\n        await dispatch('getExerciseAllowance');\r\n\r\n        commit('set', {\r\n          // name,\r\n          blockNumber: blockNumber,\r\n          balance: ethers.utils.formatEther(balance),\r\n          aOHMBalance: aOHMBalance,\r\n          network,\r\n          loading: false,\r\n          ohmBalance: ethers.utils.formatUnits(ohmBalance, 'gwei'),\r\n          sohmBalance: ethers.utils.formatUnits(sohmBalance, 'gwei'),\r\n          totalLPStaked: ethers.utils.formatUnits(totalLPStaked, 'ether'),\r\n          lpBalance: ethers.utils.formatUnits(lpBalance, 'ether'),\r\n          lpStaked: ethers.utils.formatUnits(lpStaked, 'ether'),\r\n          pendingRewards: ethers.utils.formatUnits(pendingRewards, 'gwei'),\r\n          lpStakingAPY: lpStakingAPY,\r\n          stakingReward: ethers.utils.formatUnits(stakingReward, 'gwei'),\r\n          stakingAPY: stakingAPY,\r\n          stakingRebase: stakingRebase,\r\n          nextEpochBlock,\r\n          currentIndex: ethers.utils.formatUnits(currentIndex, 'gwei'),\r\n          bondValue: bondValue,\r\n          bondPrice: bondPrice,\r\n          marketPrice: marketPrice / 1000000000,\r\n          debtRatio: debtRatio,\r\n          interestDue: ethers.utils.formatUnits(interestDue, 'gwei'),\r\n          bondMaturationBlock: bondMaturationBlock,\r\n          currentBlock,\r\n          bondDiscount,\r\n          pendingPayout: ethers.utils.formatUnits(pendingPayout, 'gwei'),\r\n          vestingPeriodInBlocks: vestingPeriodInBlocks,\r\n          totalSupply: ethers.utils.formatUnits(taoTotalSupply, 'gwei'),\r\n          circSupply: ethers.utils.formatUnits(taoCircSupply, 'gwei'),\r\n          totalBusdLP: ethers.utils.formatUnits(totalBusd, 'ether'),\r\n          taoStaked: ethers.utils.formatUnits(taoStaked, 'gwei'),\r\n          lpInVault: ethers.utils.formatUnits(totalVaultLP, 'ether'),\r\n          lpLocked: ethers.utils.formatUnits(lpLocked, 'ether'),\r\n          vaultBUSD: ethers.utils.formatUnits(vaultBUSD, 'ether'),\r\n          lpPrice,\r\n          principleValuation,\r\n          fiveDayRate,\r\n          nextEpochRewards\r\n        });\r\n        const response = await fetch(`https://taodao-api.netlify.app/.netlify/functions/server`);\r\n        const taoists = await response.json();\r\n        commit('set', { taoists });\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    } else {\r\n      console.error('This website require MetaMask');\r\n    }\r\n    console.log(`Login done in ${Date.now() - startAt}ms`);\r\n    setTimeout(() => dispatch('login'), 30000);\r\n  },\r\n  loading: ({ commit }, payload) => {\r\n    commit('set', { loading: payload });\r\n  },\r\n  async getExchangeRates({ commit }) {\r\n    const exchangeRates = await getExchangeRatesFromCoinGecko();\r\n    commit('set', { exchangeRates });\r\n  },\r\n\r\n  async buy({ commit }, value) {\r\n    const signer = provider.getSigner();\r\n    const presale = await new ethers.Contract(\r\n      addresses[state.network.chainId].PRESALE_ADDRESS,\r\n      OHMPreSale,\r\n      signer\r\n    );\r\n    const daiContract = new ethers.Contract(\r\n      addresses[state.network.chainId].DAI_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    const presaleTX = await presale.buy(ethers.utils.parseEther(value).toString());\r\n    await presaleTX.wait(console.log('Success'));\r\n    const balance = await daiContract.balanceOf(state.address);\r\n\r\n    commit('set', {\r\n      // name,\r\n      balance: ethers.utils.formatEther(balance)\r\n    });\r\n\r\n    const boughtTao = await presale.boughtTAO(state.address);\r\n    const claimUnlocked = await presale.claimUnlocked();\r\n    const claimable = await presale.claimable(state.address);\r\n\r\n    commit('set', {\r\n      claimUnlocked,\r\n      boughtTao,\r\n      claimable: ethers.utils.formatUnits(claimable, 'gwei')\r\n    });\r\n  },\r\n\r\n  async buyPretao({ commit }, value) {\r\n    const signer = provider.getSigner();\r\n\r\n    const pretaoSales = await new ethers.Contract(\r\n      addresses[state.network.chainId].PRETAO_SALES,\r\n      PreTaoSales,\r\n      signer\r\n    );\r\n\r\n    const ptaoContract = new ethers.Contract(\r\n      addresses[state.network.chainId].PTAO_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    const daiContract = new ethers.Contract(\r\n      addresses[state.network.chainId].DAI_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    const presaleTX = await pretaoSales.buypTao(ethers.utils.parseEther(value).toString());\r\n    await presaleTX.wait(console.log('Success'));\r\n    const balance = await daiContract.balanceOf(state.address);\r\n\r\n    const pretaoBalance = await ptaoContract.balanceOf(state.address);\r\n\r\n    commit('set', {\r\n      // name,\r\n      balance: ethers.utils.formatEther(balance),\r\n      pretaoBalance: ethers.utils.formatEther(pretaoBalance)\r\n    });\r\n  },\r\n\r\n  async calcBondDetails({ commit, dispatch }, amount) {\r\n    let amountInWei;\r\n    if (!amount || amount === '') {\r\n      amountInWei = ethers.utils.parseEther('0.0001'); // Use a realistic SLP ownership\r\n    } else {\r\n      amountInWei = ethers.utils.parseEther(amount);\r\n    }\r\n    const pairContract = new ethers.Contract(\r\n      addresses[state.network.chainId].LP_ADDRESS,\r\n      PairContract,\r\n      provider\r\n    );\r\n    // If the user hasn't entered anything, let's calculate a fraction of SLP\r\n    const bondingContract = new ethers.Contract(\r\n      addresses[state.network.chainId].BOND_ADDRESS,\r\n      BondContract,\r\n      provider\r\n    );\r\n    const lpContract = new ethers.Contract(\r\n      addresses[state.network.chainId].LP_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const bondingCalcContract = new ethers.Contract(\r\n      addresses[state.network.chainId].BONDINGCALC_ADDRESS,\r\n      BondCalcContract,\r\n      provider\r\n    );\r\n    const ohmContract = new ethers.Contract(\r\n      addresses[state.network.chainId].OHM_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n\r\n    const totalLP = await lpContract.totalSupply();\r\n    const ohmTotalSupply = await ohmContract.totalSupply();\r\n\r\n    const vestingPeriodInBlocks = await bondingContract.vestingPeriodInBlocks();\r\n\r\n    const totalDebtDo = await bondingContract.totalDebt();\r\n    const debtRatio = await bondingCalcContract.calcDebtRatio(totalDebtDo, ohmTotalSupply);\r\n\r\n    const reserves = await pairContract.getReserves();\r\n\r\n    const totalBusd = reserves[1];\r\n    const marketPrice = reserves[1].div(reserves[0]);\r\n\r\n    const bondValue = await bondingContract.calculateBondInterest(amountInWei.toString());\r\n    const bondPrice = (2 * totalBusd * (amountInWei / totalLP)) / bondValue;\r\n    const bondDiscount = 1 - bondPrice / marketPrice;\r\n\r\n    commit('set', {\r\n      amount,\r\n      bondValue,\r\n      bondDiscount,\r\n      debtRatio,\r\n      bondPrice: bondPrice,\r\n      vestingPeriodInBlocks,\r\n      marketPrice: marketPrice / Math.pow(10, 9)\r\n    });\r\n  },\r\n\r\n  async getExerciseAllowance({ commit }) {\r\n    if (state.address) {\r\n      const exerciseContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].EXERCISE_PTAO_ADDRESS,\r\n        ExercisePtao,\r\n        provider\r\n      );\r\n\r\n      const getpTAOAbleToClaim = await exerciseContract.getpTAOAbleToClaim(state.address);\r\n\r\n      const maxAllowedToClaim = await exerciseContract.maxAllowedToClaim(state.address);\r\n\r\n      const daiContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].DAI_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n\r\n      const daiAllowance = await daiContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].EXERCISE_PTAO_ADDRESS\r\n      );\r\n\r\n      const ptaoContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].PTAO_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n\r\n      const ptaoAllowance = await ptaoContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].EXERCISE_PTAO_ADDRESS\r\n      );\r\n\r\n      commit('set', {\r\n        exercisePtaoAllowance: ptaoAllowance,\r\n        exerciseBusdAllowance: daiAllowance,\r\n        exerciseAbleToClaim: ethers.utils.formatEther(getpTAOAbleToClaim),\r\n        exerciseMaxAllowedClaim: ethers.utils.formatEther(maxAllowedToClaim)\r\n      });\r\n    }\r\n  },\r\n\r\n  async getApprovalExerciseBusd({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const daiContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].DAI_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    if (value <= 0) return;\r\n\r\n    const approveTx = await daiContract.approve(\r\n      addresses[state.network.chainId].EXERCISE_PTAO_ADDRESS,\r\n      ethers.utils.parseEther(value).toString()\r\n    );\r\n    commit('set', { allowanceTx: 1 });\r\n    await approveTx.wait();\r\n    await dispatch('getExerciseAllowance');\r\n  },\r\n\r\n  async getApprovalExercisePtao({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const ptaoContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].PTAO_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    if (value <= 0) return;\r\n\r\n    const approveTx = await ptaoContract.approve(\r\n      addresses[state.network.chainId].EXERCISE_PTAO_ADDRESS,\r\n      ethers.utils.parseEther(value).toString()\r\n    );\r\n    commit('set', { allowanceTx: 1 });\r\n    await approveTx.wait();\r\n    await dispatch('getExerciseAllowance');\r\n  },\r\n\r\n  async exercisePtao({ commit, dispatch }, value) {\r\n    \r\n    const signer = provider.getSigner();\r\n\r\n    const ptaoContract = new ethers.Contract(\r\n      addresses[state.network.chainId].PTAO_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n    \r\n    const taoContract = new ethers.Contract(\r\n      addresses[state.network.chainId].OHM_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    const daiContract = new ethers.Contract(\r\n      addresses[state.network.chainId].DAI_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    const exerciseContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].EXERCISE_PTAO_ADDRESS,\r\n      ExercisePtao,\r\n      signer\r\n    );\r\n\r\n\r\n    const presaleTX = await exerciseContract.exercisepTAO(ethers.utils.parseEther(value).toString());\r\n    await presaleTX.wait(console.log('Success'));\r\n\r\n    const balance = await daiContract.balanceOf(state.\r\n      address);\r\n    const pretaoBalance = await ptaoContract.balanceOf(state.address);\r\n    const taoBalance = await taoContract.balanceOf(state.address);\r\n\r\n\r\n    commit('set', {\r\n      balance: ethers.utils.formatEther(balance),\r\n      pretaoBalance: ethers.utils.formatEther(pretaoBalance),\r\n      ohmBalance: ethers.utils.formatUnits(taoBalance, 'gwei'),\r\n    });\r\n\r\n\r\n  },\r\n\r\n\r\n\r\n  async getLPBondAllowance({ commit }) {\r\n    if (state.address) {\r\n      const lpContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].LP_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n      const lpBondAllowance = await lpContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].BOND_ADDRESS\r\n      );\r\n      commit('set', { lpBondAllowance });\r\n    }\r\n  },\r\n\r\n  async getLPBondApproval({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const lpContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].LP_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n    if (value <= 0) {\r\n      alert('Please enter a value greater than 0');\r\n      return;\r\n    }\r\n\r\n    const approveTx = await lpContract.approve(\r\n      addresses[state.network.chainId].BOND_ADDRESS,\r\n      ethers.utils.parseUnits('1000000000', 'ether').toString()\r\n    );\r\n    await approveTx.wait();\r\n    await dispatch('getLPBondAllowance');\r\n  },\r\n\r\n  async bondLP({ commit }, value) {\r\n    const signer = provider.getSigner();\r\n    const bonding = await new ethers.Contract(\r\n      addresses[state.network.chainId].BOND_ADDRESS,\r\n      BondContract,\r\n      signer\r\n    );\r\n\r\n    // Deposit the bond\r\n    let bondTx;\r\n    try {\r\n      bondTx = await bonding.depositBondPrinciple(ethers.utils.parseUnits(value, 'ether'));\r\n    } catch (error) {\r\n      if (error.code === -32603 && error.message.indexOf('ds-math-sub-underflow') >= 0) {\r\n        alert(\r\n          'You may be trying to bond more than your balance! Error code: 32603. Message: ds-math-sub-underflow'\r\n        );\r\n      } else {\r\n        alert(error.message);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Wait for tx to be minted\r\n    await bondTx.wait();\r\n    const lpContract = new ethers.Contract(\r\n      addresses[state.network.chainId].LP_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const lpBalance = await lpContract.balanceOf(state.address);\r\n    commit('set', {\r\n      lpBalance: ethers.utils.formatUnits(lpBalance, 'ether')\r\n    });\r\n  },\r\n\r\n  async redeemBond() {\r\n    const signer = provider.getSigner();\r\n    const bonding = await new ethers.Contract(\r\n      addresses[state.network.chainId].BOND_ADDRESS,\r\n      BondContract,\r\n      signer\r\n    );\r\n    const redeemTx = await bonding.redeemBond();\r\n    await redeemTx.wait();\r\n  },\r\n\r\n  async forfeitBond() {\r\n    const signer = provider.getSigner();\r\n    const bonding = await new ethers.Contract(\r\n      addresses[state.network.chainId].BOND_ADDRESS,\r\n      BondContract,\r\n      signer\r\n    );\r\n    const forfeitTx = await bonding.withdrawPrincipleAndForfeitInterest();\r\n    await forfeitTx.wait();\r\n  },\r\n\r\n  async claimPresale({ commit }) {\r\n    const signer = provider.getSigner();\r\n    const presale = await new ethers.Contract(\r\n      addresses[state.network.chainId].PRESALE_ADDRESS,\r\n      OHMPreSale,\r\n      signer\r\n    );\r\n\r\n    const presaleTX = await presale.claim();\r\n    await presaleTX.wait(console.log('Success'));\r\n    commit('set', {\r\n      claimable: 0\r\n    });\r\n  },\r\n\r\n  async getApproval({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const daiContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].DAI_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    if (value <= 0) return;\r\n\r\n    const approveTx = await daiContract.approve(\r\n      addresses[state.network.chainId].PRESALE_ADDRESS,\r\n      ethers.utils.parseEther(value).toString()\r\n    );\r\n    commit('set', { allowanceTx: 1 });\r\n    await approveTx.wait();\r\n    await dispatch('getAllowances');\r\n  },\r\n\r\n  async getApprovalPretao({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const daiContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].DAI_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n\r\n    if (value <= 0) return;\r\n\r\n    const approveTx = await daiContract.approve(\r\n      addresses[state.network.chainId].PRETAO_SALES,\r\n      ethers.utils.parseEther(value).toString()\r\n    );\r\n    commit('set', { allowanceTx: 1 });\r\n    await approveTx.wait();\r\n    await dispatch('getAllowancesPretao');\r\n  },\r\n\r\n  async getAllowances({ commit }) {\r\n    if (state.address) {\r\n      const diaContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].DAI_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n      const allowance = await diaContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].PRESALE_ADDRESS\r\n      );\r\n      commit('set', { allowance });\r\n    }\r\n  },\r\n\r\n  async getAllowancesPretao({ commit }) {\r\n    if (state.address) {\r\n      const diaContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].DAI_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n      const allowance = await diaContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].PRETAO_SALES\r\n      );\r\n      commit('set', { allowancePretao: allowance });\r\n    }\r\n  },\r\n\r\n  async getStakeApproval({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const ohmContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].OHM_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n    if (value <= 0) return;\r\n\r\n    const approveTx = await ohmContract.approve(\r\n      addresses[state.network.chainId].STAKING_ADDRESS,\r\n      ethers.utils.parseUnits('1000000000', 'gwei').toString()\r\n    );\r\n    await approveTx.wait();\r\n    await dispatch('getStakeAllowances');\r\n  },\r\n\r\n  async getLPStakeApproval({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const lpContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].LP_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n    if (value <= 0) return;\r\n\r\n    const approveTx = await lpContract.approve(\r\n      addresses[state.network.chainId].LPSTAKING_ADDRESS,\r\n      ethers.utils.parseUnits('1000000000', 'ether').toString()\r\n    );\r\n    await approveTx.wait();\r\n    await dispatch('getLPStakeAllowance');\r\n  },\r\n\r\n  async getStakeAllowances({ commit }) {\r\n    if (state.address) {\r\n      const ohmContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].OHM_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n      const stakeAllowance = await ohmContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].STAKING_ADDRESS\r\n      );\r\n      commit('set', { stakeAllowance });\r\n    }\r\n  },\r\n\r\n  async getLPStakeAllowance({ commit }) {\r\n    if (state.address) {\r\n      const lpContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].LP_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n      const lpStakeAllowance = await lpContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].LPSTAKING_ADDRESS\r\n      );\r\n      commit('set', { lpStakeAllowance });\r\n    }\r\n  },\r\n\r\n  async getunStakeApproval({ commit, dispatch }, value) {\r\n    const signer = provider.getSigner();\r\n    const sohmContract = await new ethers.Contract(\r\n      addresses[state.network.chainId].SOHM_ADDRESS,\r\n      ierc20Abi,\r\n      signer\r\n    );\r\n    if (value <= 0) return;\r\n\r\n    const approveTx = await sohmContract.approve(\r\n      addresses[state.network.chainId].STAKING_ADDRESS,\r\n      ethers.utils.parseUnits('1000000000', 'gwei').toString()\r\n    );\r\n    await approveTx.wait();\r\n    await dispatch('getunStakeAllowances');\r\n  },\r\n\r\n  async getunStakeAllowances({ commit }) {\r\n    if (state.address) {\r\n      const sohmContract = await new ethers.Contract(\r\n        addresses[state.network.chainId].SOHM_ADDRESS,\r\n        ierc20Abi,\r\n        provider\r\n      );\r\n      const unstakeAllowance = await sohmContract.allowance(\r\n        state.address,\r\n        addresses[state.network.chainId].STAKING_ADDRESS\r\n      );\r\n      commit('set', { unstakeAllowance });\r\n    }\r\n  },\r\n\r\n  async calculatePreTaoSaleQuote({ commit }, value) {\r\n    commit('set', { amount: value * 100 });\r\n  },\r\n\r\n  async calculateSaleQuote({ commit }, value) {\r\n    commit('set', { amount: value / state.price });\r\n  },\r\n\r\n  async getAllotmentPerBuyer({ commit }) {\r\n    try {\r\n      const presale = await new ethers.Contract(\r\n        addresses[state.network.chainId].PRESALE_ADDRESS,\r\n        OHMPreSale,\r\n        provider\r\n      );\r\n      const allotment = await presale.getAllotmentPerBuyer();\r\n      commit('set', { allotment: ethers.utils.formatUnits(allotment, 'ether') });\r\n    } catch (ex) {\r\n      console.log(ex);\r\n    }\r\n  },\r\n\r\n  async getMaxPurchase({ commit, dispatch }) {\r\n    const presale = await new ethers.Contract(\r\n      addresses[state.network.chainId].PRESALE_ADDRESS,\r\n      OHMPreSale,\r\n      provider\r\n    );\r\n    const salePrice = await presale.price();\r\n\r\n    commit('set', {\r\n      price: ethers.utils.formatUnits(salePrice.toString(), 'ether')\r\n    });\r\n  },\r\n\r\n  async stakeTAO({ commit }, value) {\r\n    const signer = provider.getSigner();\r\n    const staking = await new ethers.Contract(\r\n      addresses[state.network.chainId].STAKING_ADDRESS,\r\n      OlympusStaking,\r\n      signer\r\n    );\r\n\r\n    const stakeTx = await staking.stakeTAO(ethers.utils.parseUnits(value, 'gwei'));\r\n    await stakeTx.wait();\r\n    const ohmContract = new ethers.Contract(\r\n      addresses[state.network.chainId].OHM_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const ohmBalance = await ohmContract.balanceOf(state.address);\r\n    const sohmContract = new ethers.Contract(\r\n      addresses[state.network.chainId].SOHM_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const sohmBalance = await sohmContract.balanceOf(state.address);\r\n    commit('set', {\r\n      ohmBalance: ethers.utils.formatUnits(ohmBalance, 'gwei'),\r\n      sohmBalance: ethers.utils.formatUnits(sohmBalance, 'gwei')\r\n    });\r\n  },\r\n  async unstakeTAO({ commit }, value) {\r\n    const signer = provider.getSigner();\r\n    const staking = await new ethers.Contract(\r\n      addresses[state.network.chainId].STAKING_ADDRESS,\r\n      OlympusStaking,\r\n      signer\r\n    );\r\n    console.log(ethers.utils.parseUnits(value, 'gwei').toString());\r\n    const stakeTx = await staking.unstakeTAO(ethers.utils.parseUnits(value, 'gwei'));\r\n    await stakeTx.wait();\r\n    const ohmContract = new ethers.Contract(\r\n      addresses[state.network.chainId].OHM_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const ohmBalance = await ohmContract.balanceOf(state.address);\r\n    const sohmContract = new ethers.Contract(\r\n      addresses[state.network.chainId].SOHM_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const sohmBalance = await sohmContract.balanceOf(state.address);\r\n    commit('set', {\r\n      ohmBalance: ethers.utils.formatUnits(ohmBalance, 'gwei'),\r\n      sohmBalance: ethers.utils.formatUnits(sohmBalance, 'gwei')\r\n    });\r\n  },\r\n\r\n  async stakeLP({ commit }, value) {\r\n    const signer = provider.getSigner();\r\n    const staking = await new ethers.Contract(\r\n      addresses[state.network.chainId].LPSTAKING_ADDRESS,\r\n      LPStaking,\r\n      signer\r\n    );\r\n    const stakeTx = await staking.stakeLP(ethers.utils.parseUnits(value, 'ether'));\r\n    await stakeTx.wait();\r\n\r\n    const lpContract = new ethers.Contract(\r\n      addresses[state.network.chainId].LP_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const lpBalance = await lpContract.balanceOf(state.address);\r\n    const lpStakingContract = new ethers.Contract(\r\n      addresses[state.network.chainId].LPSTAKING_ADDRESS,\r\n      LPStaking,\r\n      provider\r\n    );\r\n    const lpStaked = await lpStakingContract.getUserBalance(state.address);\r\n    commit('set', {\r\n      lpBalance: ethers.utils.formatUnits(lpBalance, 'ether'),\r\n      lpStaked: ethers.utils.formatUnits(lpStaked, 'ether')\r\n    });\r\n  },\r\n\r\n  async unstakeLP({ commit }, value) {\r\n    const signer = provider.getSigner();\r\n    const staking = await new ethers.Contract(\r\n      addresses[state.network.chainId].LPSTAKING_ADDRESS,\r\n      LPStaking,\r\n      signer\r\n    );\r\n    const unstakeTx = await staking.unstakeLP();\r\n    await unstakeTx.wait();\r\n\r\n    const lpContract = new ethers.Contract(\r\n      addresses[state.network.chainId].LP_ADDRESS,\r\n      ierc20Abi,\r\n      provider\r\n    );\r\n    const lpBalance = await lpContract.balanceOf(state.address);\r\n    const lpStakingContract = new ethers.Contract(\r\n      addresses[state.network.chainId].LPSTAKING_ADDRESS,\r\n      LPStaking,\r\n      provider\r\n    );\r\n    const lpStaked = await lpStakingContract.getUserBalance(state.address);\r\n    commit('set', {\r\n      lpBalance: ethers.utils.formatUnits(lpBalance, 'ether'),\r\n      lpStaked: ethers.utils.formatUnits(lpStaked, 'ether')\r\n    });\r\n  },\r\n\r\n  async claimRewards() {\r\n    const signer = provider.getSigner();\r\n    const staking = await new ethers.Contract(\r\n      addresses[state.network.chainId].LPSTAKING_ADDRESS,\r\n      LPStaking,\r\n      signer\r\n    );\r\n    const claimTx = await staking.claimRewards();\r\n    await claimTx.wait();\r\n  },\r\n\r\n  async getMaxSwap({ commit, dispatch }) {\r\n    // const aOHMContract = await new ethers.Contract(\r\n    //   addresses[state.network.chainId].AOHM_ADDRESS,\r\n    //   ierc20Abi,\r\n    //   provider\r\n    // );\r\n    // const aOHMBalanceBeforeDecimals = await aOHMContract.balanceOf(state.address);\r\n    const aOHMBalance = 0 / 1000000000;\r\n\r\n    commit('set', { maxSwap: aOHMBalance });\r\n  },\r\n\r\n  async migrateToOHM({ commit }, value) {\r\n    // const signer = provider.getSigner();\r\n    // const migrateContact = await new ethers.Contract(\r\n    //   addresses[state.network.chainId].MIGRATE_ADDRESS,\r\n    //   MigrateToOHM,\r\n    //   signer\r\n    // );\r\n\r\n    // const aOHMContract = await new ethers.Contract(\r\n    //   addresses[state.network.chainId].AOHM_ADDRESS,\r\n    //   ierc20Abi,\r\n    //   provider\r\n    // );\r\n    // const aOHMContractWithSigner = aOHMContract.connect(signer);\r\n\r\n    // const allowance = await aOHMContract.allowance(\r\n    //   state.address,\r\n    //   addresses[state.network.chainId].MIGRATE_ADDRESS\r\n    // );\r\n\r\n    // if (allowance < value * 1000000000) {\r\n    //   const approveTx = await aOHMContractWithSigner.approve(\r\n    //     addresses[state.network.chainId].MIGRATE_ADDRESS,\r\n    //     parseEther((1e9).toString())\r\n    //   );\r\n    //   commit('set', { allowanceTx: 1 });\r\n    //   await approveTx.wait(state.confirmations);\r\n    // }\r\n\r\n    // const migrateTx = await migrateContact.migrate(value * 1000000000);\r\n    // await migrateTx.wait();\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default {\r\n  state,\r\n  mutations,\r\n  actions\r\n};\r\n"],"sourceRoot":""}]}