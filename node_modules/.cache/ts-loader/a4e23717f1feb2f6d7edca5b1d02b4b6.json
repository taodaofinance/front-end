{"remainingRequest":"C:\\GitCrypto\\front_end\\node_modules\\babel-loader\\lib\\index.js!C:\\GitCrypto\\front_end\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\GitCrypto\\front_end\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\GitCrypto\\front_end\\src\\helpers\\utils.ts","dependencies":[{"path":"C:\\GitCrypto\\front_end\\src\\helpers\\utils.ts","mtime":1620499713522},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\GitCrypto\\front_end\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\GitCrypto\\front_end\\src\\helpers\\utils.ts"],"names":[],"mappings":"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","sourcesContent":["import bs from 'black-scholes';\r\nimport volatility from 'volatility';\r\nimport provider from '@/helpers/provider';\r\nimport assets from '@/helpers/assets.json';\r\nimport premium from '@/helpers/premium.json';\r\nimport { abi as ierc20Abi } from '@/helpers/abi/IERC20.json';\r\nimport { abi as factoryAbi } from '@/helpers/abi/Factory.json';\r\nimport { abi as potionAbi } from '@/helpers/abi/Potion.json';\r\nimport { abi as expierc20Abi } from '@/helpers/abi/ExpandedIERC20.json';\r\nimport { ethers } from 'ethers';\r\n\r\nexport function formatTs(ts) {\r\n  if (!ts) return '';\r\n  const date = new Date(ts * 1000);\r\n  return date.toISOString().split('T')[0];\r\n}\r\n\r\nexport function shorten(str) {\r\n  if (str.length < 10) return str;\r\n  return `${str.slice(0, 6)}...${str.slice(str.length - 4)}`;\r\n}\r\n\r\nexport async function getExchangeRatesFromCoinGecko() {\r\n  const ids = Object.entries(assets)\r\n    // @ts-ignore\r\n    .map(asset => asset[1].coingeckoId)\r\n    .join(',');\r\n  const uri = `https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd`;\r\n  return await fetch(uri).then(res => res.json());\r\n}\r\n\r\nexport function getPremiumDeposit(strike, price, days) {\r\n  const otm = 1 - strike / price;\r\n  let premiumDeposit;\r\n  Object.entries(premium).forEach(p => {\r\n    if (otm > parseFloat(p[0])) premiumDeposit = p[1][days.toString()] * strike;\r\n  });\r\n  return premiumDeposit;\r\n}\r\n\r\nexport async function getPotion(address) {\r\n  const factoryAddress = process.env.VUE_APP_FACTORY_ADDRESS;\r\n  const potionContract = new ethers.Contract(address, potionAbi, provider);\r\n  // @ts-ignore\r\n  const factoryContract = new ethers.Contract(factoryAddress, factoryAbi, provider);\r\n  const potion = await factoryContract.getPotionData(potionContract.address);\r\n  const potionToken = new ethers.Contract(\r\n    await potionContract.tokenCurrency(),\r\n    expierc20Abi,\r\n    provider\r\n  );\r\n  return {\r\n    contractAddress: potionContract.address,\r\n    address: potionToken.address,\r\n    asset: potion.asset,\r\n    mintAprice: ethers.utils.formatEther(potion.mintAprice.rawValue),\r\n    mintSprice: ethers.utils.formatEther(potion.mintSprice.rawValue),\r\n    mintDepo: ethers.utils.formatEther(potion.mintDepo.rawValue),\r\n    expiry: potion.expiry.toString(),\r\n    revitID: potion.revitID.toString(),\r\n    amountRev: ethers.utils.formatEther(potion.amountRev.rawValue),\r\n    collateralToWithdraw: ethers.utils.formatEther(potion.collateralToWithdraw.rawValue)\r\n  };\r\n}\r\n\r\nexport async function getPotions(address) {\r\n  const factoryAddress = process.env.VUE_APP_FACTORY_ADDRESS;\r\n  // @ts-ignore\r\n  const contract = new ethers.Contract(factoryAddress, factoryAbi, provider);\r\n  const addresses = await contract.getBuyerPotions(address);\r\n  const promises = [];\r\n  // @ts-ignore\r\n  addresses.forEach(potionAddress => promises.push(getPotion(potionAddress)));\r\n  return await Promise.all(promises);\r\n}\r\n\r\nexport async function getAllowances(address, tokenAddresses) {\r\n  const allowances = {};\r\n  const factoryAddress = process.env.VUE_APP_FACTORY_ADDRESS;\r\n  const promises = [];\r\n  tokenAddresses.forEach(tokenAddress => {\r\n    const contract = new ethers.Contract(tokenAddress, ierc20Abi, provider);\r\n    // @ts-ignore\r\n    promises.push(contract.allowance(address, factoryAddress));\r\n  });\r\n  Promise.all(promises).then(result => {\r\n    result.forEach((allowance, i) => {\r\n      allowances[tokenAddresses[i]] = ethers.utils.formatEther(allowance);\r\n    });\r\n  });\r\n  return allowances;\r\n}\r\n\r\nexport async function revitalisePotion(payload) {\r\n  const factoryAddress = process.env.VUE_APP_FACTORY_ADDRESS;\r\n  const poolLpAddress = process.env.VUE_APP_POOL_LP_ADDRESS;\r\n  const signer = provider.getSigner();\r\n  // @ts-ignore\r\n  const factory = new ethers.Contract(factoryAddress, factoryAbi, provider);\r\n  const factoryWithSigner = factory.connect(signer);\r\n  const tx = await factoryWithSigner.revitalisePotion(\r\n    payload.contractAddress,\r\n    poolLpAddress,\r\n    { rawValue: ethers.utils.parseEther(payload.quantity) }, // nTokens\r\n    { rawValue: ethers.utils.parseEther(payload.price) }, // assetPrice\r\n    { rawValue: ethers.utils.parseEther('5') }, // dvmBond\r\n    { rawValue: ethers.utils.parseEther('1') }, // finalDeposit\r\n    { gasLimit: 7e6, gasPrice: ethers.utils.parseUnits('20', 'gwei') }\r\n  );\r\n  console.log('Revitalize tx', tx.hash);\r\n  await tx.wait();\r\n}\r\n\r\nexport async function withdrawPotion(payload) {\r\n  const factoryAddress = process.env.VUE_APP_FACTORY_ADDRESS;\r\n  const poolLpAddress = process.env.VUE_APP_POOL_LP_ADDRESS;\r\n  const signer = provider.getSigner();\r\n  // @ts-ignore\r\n  const factory = new ethers.Contract(factoryAddress, factoryAbi, provider);\r\n  const factoryWithSigner = factory.connect(signer);\r\n  const tx = await factoryWithSigner.withdrawPotion(\r\n    payload.revitalID,\r\n    payload.potionAddress,\r\n    poolLpAddress\r\n  );\r\n  console.log('Withdraw tx', tx.hash);\r\n  await tx.wait();\r\n}\r\n\r\nexport async function getMarketChartFromCoinGecko(coingeckoId) {\r\n  const ratePerDay = {};\r\n  const uri = `https://api.coingecko.com/api/v3/coins/${coingeckoId}/market_chart?vs_currency=usd&days=31`;\r\n  const marketChart = await fetch(uri).then(res => res.json());\r\n  marketChart.prices.forEach(p => {\r\n    const date = new Date();\r\n    date.setTime(p[0]);\r\n    const day = date.toISOString().split('T')[0];\r\n    ratePerDay[day] = p[1];\r\n  });\r\n  return ratePerDay;\r\n}\r\n\r\nexport async function getVolatility(coingeckoId, fromDay) {\r\n  const fromDate = new Date(fromDay);\r\n  fromDate.setDate(fromDate.getDate() - 2);\r\n  const pricePerDay = await getMarketChartFromCoinGecko(coingeckoId);\r\n  const pricePerDayValid = {};\r\n  Object.entries(pricePerDay).forEach(price => {\r\n    if (new Date(price[0]) > fromDate) pricePerDayValid[price[0]] = price[1];\r\n  });\r\n  console.log('Price per day', pricePerDayValid);\r\n  let prevPrice;\r\n  const priceArr = [];\r\n  Object.entries(pricePerDayValid).forEach(priceValid => {\r\n    // @ts-ignore\r\n    if (prevPrice) priceArr.push(Math.log(priceValid[1] / prevPrice));\r\n    prevPrice = priceValid[1];\r\n  });\r\n  console.log('Price array', priceArr);\r\n  console.log('coingeckoId', coingeckoId);\r\n  return Math.sqrt(365) * volatility(priceArr);\r\n}\r\n\r\nexport async function getBS(coingeckoId, fromDay, k, s, t) {\r\n  const v = await getVolatility(coingeckoId, fromDay);\r\n  console.log('v:', v); // Volatility between minting and liquidation\r\n  console.log('s:', s); // Price at minting\r\n  console.log('k:', k); // Strike price\r\n  console.log('t:', t); // Time between minting and liquidation\r\n  const BS = bs.blackScholes(s, k, t, v, 0, 'put');\r\n  console.log('BS =', BS);\r\n  return BS;\r\n}\r\n\r\nexport function getMinDay(mintDay) {\r\n  const ms = new Date().getTime() + 86400000 * 5;\r\n  const minDay = new Date(ms);\r\n  return mintDay > minDay ? mintDay : minDay;\r\n}\r\n\r\nexport async function getDeploymentTimestamp(address) {\r\n  // @ts-ignore\r\n  const potionContract = new ethers.Contract(address, potionAbi, provider);\r\n  const deploymentTimestamp = await potionContract.getDeploymentTimestamp();\r\n  return deploymentTimestamp.toString();\r\n}\r\n"],"sourceRoot":""}]}