{"remainingRequest":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitCrypto\\front_end\\src\\views\\Stake.vue?vue&type=template&id=707386a0&scoped=true&","dependencies":[{"path":"C:\\GitCrypto\\front_end\\src\\views\\Stake.vue","mtime":1620499713549},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}