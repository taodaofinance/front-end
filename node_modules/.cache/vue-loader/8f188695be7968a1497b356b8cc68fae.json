{"remainingRequest":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitCrypto\\front_end\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"C:\\GitCrypto\\front_end\\src\\views\\Home.vue","mtime":1621856412053},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiY29sdW1uIiB9LAogICAgWwogICAgICBfYygiTmF2IiksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJibG9jayBoZXJvIiB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJtYi00IG1haW4tdGl0bGUgIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiQW4gQWxnb3JpdGhtaWMgQ3VycmVuY3kgUHJvdG9jb2wiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjZW50ZXJlZC10ZXh0IGhlcm8tZGVzYyIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBUQU8gREFPIHV0aWxpemVzIFByb3RvY29sIE93bmVkIFZhbHVlIHRvIGVuYWJsZSBwcmljZSBjb25zaXN0ZW5jeSBhbmQgc2NhcmNpdHkgd2l0aGluIGFuIGluZmluaXRlIHN1cHBseSBzeXN0ZW0uIEZvcmtlZCBmcm9tIE9ITSB3aXRoIGFkZGl0aW9uYWwgaW1wcm92ZW1lbnRzLiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ1dHRvbiBidXR0b24tcHJpbWFyeSBidXR0b24tY2VudGVyZWQgZmFkZS1pbiIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMnJlbSBhdXRvIiwgIm1heC13aWR0aCI6ICIyMDBweCIgfSwKICAgICAgICAgICAgICBhdHRyczogeyB0bzogeyBuYW1lOiAiZGFzaGJvYXJkIiB9IH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIEVudGVyIEFwcCAiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ1dHRvbiBidXR0b24tcHJpbWFyeSBidXR0b24tY2VudGVyZWQgZmFkZS1pbiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIG9uQ2xpY2s6CiAgICAgICAgICAgICAgICAgICIoZnVuY3Rpb24oKXtcbiAgICAgIHdpbmRvdy5vcGVuKCdodHRwczovL2V4Y2hhbmdlLnBhbmNha2Vzd2FwLmZpbmFuY2UvIy9zd2FwP291dHB1dEN1cnJlbmN5PTB4NzA2NURkQTNmOEVjNUY2QzE1NTY0OEJkZUU0NDIwYzA1MjVEOTNDNicsICdfYmxhbmsnKTtcbn0pKCk7IiwKICAgICAgICAgICAgICAgIGlkOiAiYnV5bm93LWJ0biIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJ1eSBOb3ciKV0KICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJibG9jayIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyBiYWNrZ3JvdW5kOiAiIzAwMCIgfSwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAid2hhdCIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ctcmVzcG9uc2l2ZSBmbGV4LWNlbnRlcmVkIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ib3gtbW9kdWxlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl9tKDApLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ibG9jay1kZXNjIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJCYWNrZWQgYnkgQXNzZXRzIildKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgIkV2ZXJ5IFRBTyBpcyBiYWNrZWQgYnkgQlVTRCBhbmQgVEFPLUJVU0QgTFAgaW4gdGhlIHRyZWFzdXJ5LiBUaGlzIGludHJpbnNpYyB2YWx1ZSBjYW5ub3QiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAiIGJlIGRpbHV0ZWQsIHByb3ZpZGluZyBhIGZ1bmRhbWVudGFsIGNoZWNrIG9uIGluZmxhdGlvbi4iCiAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgIF92bS5fbSgyKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fbSgzKSwKICAgICAgX3ZtLl9tKDQpLAogICAgICBfdm0uX20oNSksCiAgICAgIF9jKCJGb290ZXIiKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ibG9jay1pbWFnZSIgfSwgWwogICAgICBfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3Rhb2lzbS0wLmpwZyIpLCBhbHQ6ICIiIH0gfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ib3gtbW9kdWxlIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ibG9jay1pbWFnZSIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvdGFvaXNtLTIuanBnIiksIGFsdDogIiIgfSB9KQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWJsb2NrLWRlc2MiIH0sIFsKICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJBbGdvcml0aG1pY2FsbHkgTWFuYWdlZCIpXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgVEFPIGhhcyBhbiBhZGp1c3RhYmxlIHBvbGljeSBzdGF0ZSwgYWxsb3dpbmcgdGhlIERBTyB0byBhZGp1c3QgcGFyYW1ldGVycyBhbmQgYWxnb3JpdGhtaWNhbGx5IG9wdGltaXplIGZvciBzdGFiaWxpdHkgb3IgZ3Jvd3RoLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ib3gtbW9kdWxlIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmVhdHVyZS1ibG9jay1pbWFnZSIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvdGFvaXNtLTEuanBnIiksIGFsdDogIiIgfSB9KQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlLWJsb2NrLWRlc2MiIH0sIFsKICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJDb21tdW5pdHkgR292ZXJuZWQiKV0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFRBTyBpcyBhIERBTyBmaXJzdCBwcm9qZWN0IGFjdGl2ZWx5IHdvcmtpbmcgdG93YXJkIGNvbXBsZXRlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgc3lzdGVtIHRvIHRoZSBjb21tdW5pdHkuICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9jayByb3ctcmVzcG9uc2l2ZSBuby1wYWQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ctZmxleC1tYXggZmVhdHVyZS1yb3ciIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdy1mbGV4LWRlc2MiIH0sIFsKICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIldoYXQgbWFrZXMgVEFPIHVuaXF1ZT8iKV0pLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIFRBTyBpcyBhIGZsb2F0aW5nIGFsZ29yaXRobWljIGN1cnJlbmN5LiBUaGlzIG1lYW5zIHRoYXQgaXQgaGFzIG1lY2hhbmlzbXMgdG8gcHJvbW90ZSBzdGFiaWxpdHkgYW5kIHByZWRpY3RhYmxpbGl0eSB3aXRob3V0IGRpcmVjdGx5IHBlZ2dpbmcgdG8gYW55IGFzc2V0LiBIb3dldmVyLCB3ZSB0YWtlIGl0IG9uZSBzdGVwIGZ1cnRoZXIgd2l0aCB0aGUgaW50cm9kdWN0aW9uIG9mIGFkanVzdGFibGUgcG9saWN5OyB0aGUgREFPIGNhbiBtb3ZlIGNlcnRhaW4gdmFyaWFibGVzIHVwIGFuZCBkb3duIHRvIHRhcmdldCBncm93dGggYW5kIHByb2ZpdGFiaWxpdHkgb3Igc3RhYmlsaXR5IGFuZCBwcmVkaWN0YWJpbGl0eS4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdy1mbGV4LWltYWdlIGZlYXR1cmUtaW1hZ2UiIH0sIFsKICAgICAgICBfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3Rhb2lzbS00LmpwZyIpLCBhbHQ6ICIiIH0gfSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiYmxvY2siLAogICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICBiYWNrZ3JvdW5kOiAiIzAwMCIsCiAgICAgICAgICAicGFkZGluZy1ib3R0b20iOiAiMTAwcHggIWltcG9ydGFudCIKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7IGlkOiAiaG93IiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdy1yZXNwb25zaXZlIGZsZXgtY2VudGVyZWQiIH0sIFsKICAgICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJjZW50ZXJlZC10ZXh0IHB5LTgiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJIb3cgSXQgV29ya3MiKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdy1yZXNwb25zaXZlIGZsZXgtY2VudGVyZWQiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAid29ya3MtbW9kdWxlLXJlc3BvbnNpdmUiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3b3Jrcy1pY29uIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvY29pbi5wbmciKSwgYWx0OiAiIiB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAid29ya3MtZGVzYyIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIlJlc2VydmVzIildKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBUQU8gaXMgYWx3YXlzIGJhY2tlZCBieSBvbmUgQlVTRCBvciBvbmUgVEFPIGJhY2tlZCBieSBvbmUgQlVTRC4gVGhpcyBjcmVhdGVzIGEgZGVtYW5kLWJhc2VkIGNvbnN0cmFpbnQgb24gaXNzdWFuY2Ugb2Ygc3VwcGx5LiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3b3Jrcy1tb2R1bGUtcmVzcG9uc2l2ZSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndvcmtzLWljb24iIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9tYXJrZXQucG5nIiksIGFsdDogIiIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndvcmtzLWRlc2MiIH0sIFsKICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJNYXJrZXQgT3BlcmF0aW9ucyIpXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgTmV3IFRBTyBpcyBjcmVhdGVkIHZpYSBkaXJlY3Qgc2FsZXMgaW50byB0aGUgbWFya2V0LiBUaGVzZSBzYWxlcyBpbmNyZWFzZSBsaW5lYXJseSB3aXRoIHRoZSBtYXJrZXQgcHJlbWl1bSBhbmQgcHJvZHVjZSBwcm9maXRzIGZvciBzdGFrZXJzLiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ctcmVzcG9uc2l2ZSBmbGV4LWNlbnRlcmVkIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndvcmtzLW1vZHVsZS1yZXNwb25zaXZlIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAid29ya3MtaWNvbiIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2dvdmVybmFuY2UucG5nIiksIGFsdDogIiIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndvcmtzLWRlc2MiIH0sIFsKICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJHb3Zlcm5hbmNlIildKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBUaGUgREFPIGNvbnRyb2xzIHBvbGljeSB0b29scyB0aGF0IGFsbG93IHVzIHRvIGxvb3NlbiwgaW5jcmVhc2luZyBwcm9maXRhYmlsaXR5IGFuZCB2b2xhdGlsaXR5LCBvciB0aWdodGVuLCBpbmNyZWFzaW5nIHN0YWJpbGl0eSBhbmQgcHJlZGljdGFiaWxpdHkuICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndvcmtzLW1vZHVsZS1yZXNwb25zaXZlIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAid29ya3MtaWNvbiIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2JvbmQucG5nIiksIGFsdDogIiIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndvcmtzLWRlc2MiIH0sIFsKICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJCb25kaW5nIildKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBOZXcgVEFPIGlzIGNyZWF0ZWQgdmlhIGRlZmVycmVkIHNhbGVzIGZvciBMUC4gQm9uZGVycyBsb2NrIHRoZWlyIExQIGZvciBhIHZlc3RpbmcgdGVybSBhbmQgcmVjZWl2ZSBhIGRpc2NvdW50IG9uIFRBTyB3aGVuIHRoZSB0cmFkZSB1bHRpbWF0ZWx5IG9jY3Vycy4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9jayByb3ctcmVzcG9uc2l2ZSBuby1wYWQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ctZmxleC1pbWFnZSBmZWF0dXJlLWltYWdlIiB9LCBbCiAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy90YW9pc20tMy5qcGciKSwgYWx0OiAiIiB9IH0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdy1mbGV4LW1heCBmZWF0dXJlLXJvdyIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93LWZsZXgtZGVzYyIgfSwgWwogICAgICAgICAgX2MoImgyIiwgW192bS5fdigiQSB3b3JsZCBvZiBvcHBvcnR1bml0eSIpXSksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgVGhlIFRBTyByZXNlcnZlIHN5c3RlbSBlbmFibGVzIG5ldyBpbXBsZW1lbnRhdGlvbnMgb2YgYSBtdWx0aXR1ZGUgb2YgRGVGaSBwcmltaXRpdmVzLiBJbnRlcmVzdCBhbmQgbGlxdWlkYXRpb24tZnJlZSBsZXZlcmFnZSBhbmQgYm9ycm93aW5nLCBjb3VudGVycGFydHktZnJlZSBvcHRpb25zIGFuZCBkZXJpdmF0aXZlcywgdHJ1c3RsZXNzIHVuZGVyY29sbGF0ZXJhbGl6ZWQgbGVuZGluZyBhbmQgbW9yZSBhcmUgcG9zc2libGUuIFRoZSBmdXR1cmUgaXMgYnJpZ2h0LiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}