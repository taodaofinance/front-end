{"remainingRequest":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitCrypto\\front_end\\src\\views\\Bond.vue?vue&type=style&index=0&id=1dae84b8&scoped=true&lang=css&","dependencies":[{"path":"C:\\GitCrypto\\front_end\\src\\views\\Bond.vue","mtime":1620499713533},{"path":"C:\\GitCrypto\\front_end\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5oYXNFZmZlY3Qgew0KICBjdXJzb3I6IHBvaW50ZXI7DQp9DQo="},{"version":3,"sources":["Bond.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyVA;AACA;AACA","file":"Bond.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"dapp\" class=\"dapp\">\r\n      <!-- <VueLoadingIndicator v-if=\"settings.loading\" class=\"overlay big\" /> \r\n      <div v-else>\r\n      </div>-->\r\n      <Navbar />\r\n\r\n      <div class=\"wrapper\">\r\n        <div class=\"dapp-center-modal\">\r\n          <div class=\"dapp-modal-wrapper\">\r\n            <div class=\"swap-input-column\">\r\n              <div class=\"stake-toggle-row\">\r\n                <toggle-switch\r\n                  :options=\"myOptions\"\r\n                  v-model=\"selectedMapOption\"\r\n                  :value=\"selectedMapOption\"\r\n                />\r\n              </div>\r\n\r\n              <div v-if=\"isRedeem == false\" class=\"swap-input-row\">\r\n                <div class=\"stake-input-container\">\r\n                  <input\r\n                    v-on:keyup=\"onInputChange\"\r\n                    v-on:change=\"onInputChange\"\r\n                    id=\"bond-input-id\"\r\n                    placeholder=\"Type an amount\"\r\n                    class=\"bond-input\"\r\n                    type=\"number\"\r\n                  />\r\n                </div>\r\n                <div class=\"cur-max-box\">\r\n                  <div class=\"max-button\" @click=\"setStake(100)\">100%</div>\r\n                </div>\r\n                <div v-if=\"isRedeem == true\"></div>\r\n              </div>\r\n\r\n              <div v-if=\"isRedeem == false\" class=\"stake-price-data-column\">\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Balance</p>\r\n                  <p class=\"price-data\">{{ trim($store.state.settings.lpBalance, 4) }} LP</p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Bond Price</p>\r\n                  <p id=\"bond-price-id\" class=\"price-data\">\r\n                    {{\r\n                      $store.state.settings.bondPrice\r\n                        ? trim($store.state.settings.bondPrice / 1000000000, 4)\r\n                        : 0\r\n                    }}\r\n                    BUSD\r\n                  </p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Market Price</p>\r\n                  <p id=\"bond-market-price-id\" class=\"price-data\">\r\n                    {{ trim($store.state.settings.marketPrice, 4) }} BUSD\r\n                  </p>\r\n                </div>\r\n\r\n                <div\r\n                  class=\"stake-price-data-row\"\r\n                  :style=\"{ visibility: hasEnteredAmount ? 'visible' : 'hidden' }\"\r\n                >\r\n                  <p class=\"price-label\">You Will Get</p>\r\n                  <p id=\"bond-value-id\" class=\"price-data\">\r\n                    {{ trim($store.state.settings.bondValue / 1000000000, 4) }} TAO\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div v-else class=\"stake-price-data-column\">\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Balance</p>\r\n                  <p class=\"price-data\">{{ trim($store.state.settings.lpBalance, 4) }} LP</p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Pending Rewards</p>\r\n                  <p id=\"bond-market-price-id\" class=\"price-data\">\r\n                    {{ trim($store.state.settings.interestDue, 4) }} TAO\r\n                  </p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Claimable Rewards</p>\r\n                  <p id=\"bond-market-price-id\" class=\"price-data\">\r\n                    {{ trim($store.state.settings.pendingPayout, 4) }} TAO\r\n                  </p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Full Bond Maturation</p>\r\n                  <p id=\"bond-market-price-id\" class=\"price-data\">\r\n                    <vue-countdown\r\n                      :time=\"\r\n                        ($store.state.settings.bondMaturationBlock -\r\n                          $store.state.settings.currentBlock) *\r\n                        3 *\r\n                        1000\r\n                      \"\r\n                      v-slot=\"{ days, hours, minutes, seconds }\"\r\n                    >\r\n                      {{ days }}d, {{ hours }}h, {{ minutes }}m, {{ seconds }} seconds\r\n                    </vue-countdown>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div v-if=\"isRedeem == true\" class=\"d-flex align-self-center mb-4\">\r\n                <div class=\"redeem-button\" @click=\"redeem\">Claim Rewards</div>\r\n              </div>\r\n\r\n              <div\r\n                v-else-if=\"hasAllowance == true && isRedeem == false\"\r\n                class=\"d-flex align-self-center mb-4\"\r\n              >\r\n                <div id=\"bond-button-id\" class=\"redeem-button\" @click=\"bond\">Bond</div>\r\n              </div>\r\n\r\n              <div v-else class=\"d-flex align-self-center mb-4\">\r\n                <div id=\"bond-button-id\" class=\"redeem-button\" @click=\"seekApproval\">Approve</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"bond-data\">\r\n            <div class=\"row bond-data-row p-4\">\r\n              <div class=\"col-4 text-center\">\r\n                <p>Debt Ratio</p>\r\n                <p>\r\n                  {{\r\n                    $store.state.settings.debtRatio\r\n                      ? trim($store.state.settings.debtRatio / 10000000, 2)\r\n                      : '-- '\r\n                  }}%\r\n                </p>\r\n              </div>\r\n              <div class=\"col-4 text-center\">\r\n                <p>Vesting Term</p>\r\n                <p>\r\n                  {{\r\n                    $store.state.settings.vestingPeriodInBlocks &&\r\n                    $store.state.settings.blocksPerDay\r\n                      ? $store.state.settings.vestingPeriodInBlocks /\r\n                        $store.state.settings.blocksPerDay\r\n                      : '--'\r\n                  }}\r\n                  days\r\n                </p>\r\n              </div>\r\n              <div class=\"col-4 text-center\">\r\n                <p>Discount</p>\r\n                <p>\r\n                  {{\r\n                    $store.state.settings.bondDiscount\r\n                      ? trim($store.state.settings.bondDiscount * 100, 2)\r\n                      : '-- '\r\n                  }}%\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex';\r\nimport { shorten } from '@/helpers/utils.ts';\r\nimport { ethers } from 'ethers';\r\nexport default {\r\n  async beforeUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.$store.state.settings.menuOpened = false;\r\n\r\n    const timer = setInterval(async () => {\r\n      const amount = document.getElementById('bond-input-id')?.value;\r\n      await this.calcBondDetails(amount);\r\n    }, 1000 * 15);\r\n    this.interval = timer;\r\n  },\r\n  data() {\r\n    return {\r\n      myOptions: {\r\n        layout: {\r\n          color: 'white',\r\n          backgroundColor: '#282828',\r\n          selectedColor: 'white',\r\n          selectedBackgroundColor: 'green',\r\n          borderColor: 'white',\r\n          fontFamily: 'Arial',\r\n          fontWeight: 'normal',\r\n          lineHeight: '1',\r\n          fontWeightSelected: 'bold',\r\n          squareCorners: false,\r\n          noBorder: false,\r\n        },\r\n        size: {\r\n          fontSize: 1,\r\n          height: 2.5,\r\n          padding: 0.3,\r\n          width: 15,\r\n          borderRadius: 5,\r\n        },\r\n        items: {\r\n          delay: 0.4,\r\n          preSelected: 'unknown',\r\n          disabled: false,\r\n          labels: [\r\n            { name: 'Bond', color: 'black', backgroundColor: 'white' },\r\n            { name: 'Redeem', color: 'black', backgroundColor: 'white' },\r\n          ],\r\n        },\r\n      },\r\n      selectedMapOption: 'Bond',\r\n      bondToggle: true,\r\n      interval: null,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(['settings']),\r\n    maxStrike() {\r\n      const exchangeRate = this.settings.exchangeRates[this.form.asset];\r\n      return exchangeRate && exchangeRate.usd ? exchangeRate.usd : 1e9;\r\n    },\r\n    hasEnteredAmount() {\r\n      return this.$store.state.settings.amount;\r\n    },\r\n    isRedeem() {\r\n      if (this.selectedMapOption) {\r\n        switch (this.selectedMapOption) {\r\n          case 'Redeem':\r\n            return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    address() {\r\n      if (this.$store.state.settings.address) return this.settings.address;\r\n      return null;\r\n    },\r\n\r\n    disconnect() {\r\n      if (this.$store.state.settings.address) return this.$store.state.address.initial;\r\n      return null;\r\n    },\r\n    hasAllowance() {\r\n      const approval = this.$store.state.settings.lpBondAllowance;\r\n      if (approval > 0) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions([\r\n      'redeemBond',\r\n      'bondLP',\r\n      'forfeitBond',\r\n      'getLPBondApproval',\r\n      'getLPBondAllowance',\r\n      'calcBondDetails',\r\n    ]),\r\n    shorten,\r\n    async setStake(value) {\r\n      // Calculate suppliedQuantity and round it to down to avoid conflicts with uint.\r\n      let suppliedQuantity = this.$store.state.settings.lpBalance;\r\n      suppliedQuantity = Math.floor(suppliedQuantity * 100000000000000000) / 100000000000000000;\r\n      switch (this.selectedMapOption) {\r\n        case 'Bond':\r\n          this.quantity = suppliedQuantity;\r\n          if (document.getElementById('bond-input-id')) {\r\n            document.getElementById('bond-input-id').value = suppliedQuantity;\r\n          }\r\n          break;\r\n      }\r\n      const amount = document.getElementById('bond-input-id')?.value;\r\n      if (amount) {\r\n        await this.calcBondDetails(amount);\r\n      }\r\n    },\r\n    async onInputChange() {\r\n      const amount = document.getElementById('bond-input-id')?.value;\r\n      if (amount) {\r\n        await this.calcBondDetails(amount);\r\n      }\r\n    },\r\n    async seekApproval() {\r\n      switch (this.selectedMapOption) {\r\n        case 'Bond':\r\n          if (isNaN(this.$store.state.settings.amount)) {\r\n            alert('The value entered is not a number. Please try again!');\r\n            return;\r\n          } else {\r\n            await this.getLPBondApproval(this.$store.state.settings.amount);\r\n          }\r\n          break;\r\n      }\r\n    },\r\n    async bond() {\r\n      const value = this.$store.state.settings.amount;\r\n      const bondInterest = this.$store.state.settings.interestDue;\r\n      const bondRewardDue = this.$store.state.settings.pendingPayout;\r\n      switch (this.selectedMapOption) {\r\n        case 'Bond':\r\n          if (value === '') {\r\n            alert('Please enter a value!');\r\n          } else if (isNaN(value)) {\r\n            alert('Please enter a valid value!');\r\n          } else if (bondInterest > 0 || bondRewardDue > 0) {\r\n            const shouldProceed = confirm(\r\n              'You have an existing bond. Bonding will reset your vesting period and forfeit rewards. We recommend claiming rewards first or using a fresh wallet. Do you still want to proceed?'\r\n            );\r\n            if (shouldProceed) {\r\n              await this.bondLP(value);\r\n            }\r\n          } else {\r\n            await this.bondLP(value);\r\n          }\r\n          break;\r\n      }\r\n    },\r\n    async redeem() {\r\n      await this.redeemBond();\r\n    },\r\n    async forfeit() {\r\n      await this.forfeitBond();\r\n    },\r\n    trim(number, precision) {\r\n      if (number == undefined) {\r\n        number = 0;\r\n      }\r\n      const array = number.toString().split('.');\r\n      array.push(array.pop().substring(0, precision));\r\n      const trimmedNumber = array.join('.');\r\n      return trimmedNumber;\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.hasEffect {\r\n  cursor: pointer;\r\n}\r\n</style>"]}]}