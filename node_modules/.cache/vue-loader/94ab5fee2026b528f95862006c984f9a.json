{"remainingRequest":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitCrypto\\front_end\\src\\views\\Stake.vue?vue&type=style&index=0&id=707386a0&scoped=true&lang=css&","dependencies":[{"path":"C:\\GitCrypto\\front_end\\src\\views\\Stake.vue","mtime":1620938689146},{"path":"C:\\GitCrypto\\front_end\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitCrypto\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmhhc0VmZmVjdCB7DQogIGN1cnNvcjogcG9pbnRlcjsNCn0NCg=="},{"version":3,"sources":["Stake.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsRA;AACA;AACA","file":"Stake.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"dapp\" class=\"dapp\">\r\n      <!-- <VueLoadingIndicator v-if=\"settings.loading\" class=\"overlay big\" /> \r\n      <div v-else>\r\n      </div>-->\r\n\r\n      <Navbar />\r\n      <div class=\"wrapper\">\r\n        <div class=\"dapp-center-modal\">\r\n          <div class=\"dapp-modal-wrapper\">\r\n            <div class=\"swap-input-column\">\r\n              <div class=\"stake-toggle-row\">\r\n                <toggle-switch\r\n                  :options=\"myOptions\"\r\n                  v-model=\"selectedMapOption\"\r\n                  :value=\"selectedMapOption\"\r\n                />\r\n              </div>\r\n\r\n              <div class=\"swap-input-row\">\r\n                <div class=\"stake-input-container\">\r\n                  <input\r\n                    v-model=\"quantity\"\r\n                    placeholder=\"Type an amount\"\r\n                    class=\"stake-input\"\r\n                    type=\"text\"\r\n                  />\r\n                </div>\r\n                <div class=\"cur-max-box\">\r\n                  <div class=\"max-button\" @click=\"setStake(100)\">100%</div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"stake-price-data-column\">\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Balance</p>\r\n                  <p class=\"price-data\">{{ trim($store.state.settings.ohmBalance, 4) }} TAO</p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Staked</p>\r\n                  <p class=\"price-data\">{{ trim($store.state.settings.sohmBalance, 4) }} TAO</p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Next Epoch Rewards</p>\r\n                  <p class=\"price-data\">\r\n                    {{ trim($store.state.settings.nextEpochRewards, 4) }} TAO\r\n                  </p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Current Epoch</p>\r\n                  <p class=\"price-data\">\r\n                    <!-- <vue-countdown\r\n                      :time=\"\r\n                        ($store.state.settings.currentBlock -\r\n                        $store.state.settings.epochStarted) *\r\n                        3 *\r\n                        1000\r\n                      \"\r\n                      v-slot=\"{ days, hours, minutes, seconds }\"\r\n                    >\r\n                      {{ days }}d, {{ hours }}h, {{ minutes }}m, {{ seconds }} seconds\r\n                    </vue-countdown> -->\r\n\r\n                    {{\r\n                      Math.floor(\r\n                        ($store.state.settings.currentBlock - $store.state.settings.epochStarted) /\r\n                          $store.state.settings.epochInterval\r\n                      ) + 1\r\n                    }}\r\n                  </p>\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Next Epoch</p>\r\n                  <p class=\"price-data\">\r\n                    <vue-countdown\r\n                      :time=\"\r\n                        ($store.state.settings.nextEpochBlock -\r\n                          $store.state.settings.currentBlock) *\r\n                          3 *\r\n                          1000\r\n                      \"\r\n                      v-slot=\"{ days, hours, minutes, seconds }\"\r\n                    >\r\n                      {{ days }}d, {{ hours }}h, {{ minutes }}m, {{ seconds }} seconds\r\n                    </vue-countdown>\r\n                  </p>\r\n                </div>\r\n\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Upcoming rebase</p>\r\n                  <p class=\"price-data\">\r\n                    {{ ($store.state.settings.stakingRebase * 100) | formatNumber }} %\r\n                  </p>\r\n                  <!-- profit / staked supply -->\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">5 days rate</p>\r\n                  <p class=\"price-data\">\r\n                    {{ ($store.state.settings.fiveDayRate * 100) | formatNumber }} %\r\n                  </p>\r\n                  <!-- profit / staked supply -->\r\n                </div>\r\n\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Upcoming APY</p>\r\n\r\n                  <p class=\"price-data\">\r\n                    {{\r\n                      $store.state.settings.stakingAPY !== 0 &&\r\n                      $store.state.settings.stakingAPY !== 100\r\n                        ? ($store.state.settings.stakingAPY | formatNumber) + '%'\r\n                        : 'Double reward last epoch, Reward will return epoch after'\r\n                    }}\r\n                  </p>\r\n                  <!-- 1+rebase^1095-1 -->\r\n                </div>\r\n                <div class=\"stake-price-data-row\">\r\n                  <p class=\"price-label\">Current index</p>\r\n                  <p class=\"price-data\">{{ trim($store.state.settings.currentIndex, 4) }} TAO</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div v-if=\"hasAllowance\" class=\"stake-button-container\">\r\n                <div class=\"stake-button\" @click=\"executeStake\">{{ selectedMapOption }}</div>\r\n              </div>\r\n              <div v-else class=\"stake-button-container\">\r\n                <div class=\"stake-button\" @click=\"seekApproval\">Approve</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <ModalLogin :open=\"modalLoginOpen\" @close=\"modalLoginOpen = false\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex';\r\nimport { shorten } from '@/helpers/utils.ts';\r\nimport { ethers } from 'ethers';\r\n\r\nexport default {\r\n  async mounted() {\r\n    this.$store.state.settings.menuOpened = false;\r\n  },\r\n  data() {\r\n    return {\r\n      myOptions: {\r\n        layout: {\r\n          color: 'white',\r\n          backgroundColor: '#282828',\r\n          selectedColor: 'white',\r\n          selectedBackgroundColor: 'green',\r\n          borderColor: 'white',\r\n          fontFamily: 'Arial',\r\n          fontWeight: 'normal',\r\n          lineHeight: '1',\r\n          fontWeightSelected: 'bold',\r\n          squareCorners: false,\r\n          noBorder: false\r\n        },\r\n        size: {\r\n          fontSize: 1,\r\n          height: 2.5,\r\n          padding: 0.3,\r\n          width: 15,\r\n          borderRadius: 5\r\n        },\r\n        items: {\r\n          delay: 0.4,\r\n          preSelected: 'unknown',\r\n          disabled: false,\r\n          labels: [\r\n            { name: 'Stake', color: 'black', backgroundColor: 'white' },\r\n            { name: 'Unstake', color: 'black', backgroundColor: 'white' }\r\n          ]\r\n        }\r\n      },\r\n      selectedMapOption: 'Stake',\r\n      quantity: '',\r\n      stakeToggle: true,\r\n      modalLoginOpen: false\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(['settings']),\r\n    isValid() {\r\n      return parseFloat(this.form.quantity);\r\n    },\r\n    address() {\r\n      if (this.$store.state.settings.address) return this.$store.state.settings.address;\r\n      return null;\r\n    },\r\n    hasAllowance() {\r\n      if (parseFloat(this.quantity)) {\r\n        switch (this.selectedMapOption) {\r\n          case 'Stake':\r\n            return (\r\n              parseInt(this.$store.state.settings.stakeAllowance) >=\r\n              parseInt(ethers.utils.parseUnits(this.quantity.toString(), 'gwei'))\r\n            );\r\n          case 'Unstake':\r\n            return (\r\n              parseInt(this.$store.state.settings.unstakeAllowance) >=\r\n              parseInt(ethers.utils.parseUnits(this.quantity.toString(), 'gwei'))\r\n            );\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions([\r\n      'SendDai',\r\n      'getStakeApproval',\r\n      'stakeTAO',\r\n      'unstakeTAO',\r\n      'getunStakeApproval',\r\n      'getStakingAPY'\r\n    ]),\r\n    async executeStake() {\r\n      console.log(this.selectedMapOption);\r\n      switch (this.selectedMapOption) {\r\n        case 'Stake':\r\n          await this.stakeTAO(this.quantity.toString());\r\n          break;\r\n        case 'Unstake':\r\n          await this.unstakeTAO(this.quantity.toString());\r\n      }\r\n      //updatestats\r\n    },\r\n    setStake(value) {\r\n      console.log(`Set stake ${value}`);\r\n      switch (this.selectedMapOption) {\r\n        case 'Stake':\r\n          this.quantity = this.$store.state.settings.ohmBalance;\r\n          break;\r\n        case 'Unstake':\r\n          this.quantity = this.$store.state.settings.sohmBalance;\r\n      }\r\n    },\r\n\r\n    trim(number, precision) {\r\n      if (number == undefined) {\r\n        number = 0;\r\n      }\r\n      const array = number.toString().split('.');\r\n      array.push(array.pop().substring(0, precision));\r\n      const trimmedNumber = array.join('.');\r\n      return trimmedNumber;\r\n    },\r\n\r\n    async seekApproval() {\r\n      switch (this.selectedMapOption) {\r\n        case 'Stake':\r\n          await this.getStakeApproval(this.quantity.toString());\r\n          break;\r\n        case 'Unstake':\r\n          await this.getunStakeApproval(this.quantity.toString());\r\n      }\r\n    },\r\n    shorten(addr) {\r\n      return shorten(addr);\r\n    },\r\n    maxStake() {\r\n      this.form.quantity = this.$store.state.settings.balance;\r\n    },\r\n    disconnect() {\r\n      if (this.$store.state.settings.address) return this.$store.state.address.initial;\r\n      return null;\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n.hasEffect {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"]}]}